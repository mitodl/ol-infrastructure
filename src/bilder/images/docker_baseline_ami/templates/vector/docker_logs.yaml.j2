---
sources:
  collect_docker_logs:
    type: docker_logs

transforms:
  parse_docker_logs:
    type: remap
    inputs:
    - 'collect_docker_logs'
    source: |
      . = map_keys(., recursive: true) -> |key| { replace(key, ".", "_") }
      .docker_service = .label.com_docker_compose_service
      del(.label)
      del(.container_id)
      del(.container_created_at)
      del(.source_type)
      .environment = "${ENVIRONMENT}"

  drop_unwanted_logs:
    type: remap
    inputs:
    - "parse_docker_logs"
    source: |
      # Drop all messages regarding polling from the ELB
      abort_match_elb, err = (match_any(.message, [r'ELB-HealthChecker.*', r'/ping.*']))
      if abort_match_elb {
        abort
      }

  enrich_docker_logs:
    type: aws_ec2_metadata
    inputs:
    - 'drop_unwanted_logs'
    namespace: ec2


sinks:
  ship_docker_logs_to_grafana_cloud:
    inputs:
    - 'enrich_docker_logs'
    type: loki
    auth:
      strategy: basic
      password: ${GRAFANA_CLOUD_API_KEY}
      user: "${GRAFANA_CLOUD_LOKI_API_USER}"
    endpoint: https://logs-prod-us-central1.grafana.net
    encoding:
      codec: json
    labels:
      environment: ${ENVIRONMENT}
      application: ${APPLICATION}
      service: docker
    out_of_order_action: rewrite_timestamp
