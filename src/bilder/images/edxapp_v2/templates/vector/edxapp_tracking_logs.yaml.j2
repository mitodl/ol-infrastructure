---
sources:
  collect_edx_tracking_logs:
    file_key: log_file
    type: file
    include:
    - /opt/data/logs/tracking_logs.log

transforms:
  parse_edx_tracking_logs:
    inputs:
    - 'collect_edx_tracking_logs'
    type: remap
    source: |
      # Only parse top level JSON and render nested objects as strings
      parsed, err = parse_json(.message, max_depth: 1)
      if parsed != null {
        del(.message)
        . = merge!(., parsed)
        .labels = ["edx_tracking"]
        .environment = "${ENVIRONMENT}"
      } else {
        log(err, level: "error")
        .malformed = true
      }

  filter_out_malformed_message_edx_tracking_logs:
    inputs:
    - 'parse_edx_tracking_logs'
    type: filter
    condition: .malformed != true

  filter_out_well_formed_message_edx_tracking_logs:
    inputs:
    - 'parse_edx_tracking_logs'
    type: filter
    condition: .malformed == true

  # This filter must exist
  enrich_logs_global_funnel:
    type: aws_ec2_metadata
    inputs:
    - "parse_edx_tracking_logs"
    namespace: ec2

sinks:
  ship_edx_tracking_logs_to_s3:
    inputs:
    - 'filter_out_malformed_message_edx_tracking_logs'
    type: aws_s3
    bucket: ${ENVIRONMENT}-edxapp-tracking
    region: us-east-1
    key_prefix: valid/%F/%H_
    encoding:
      codec: json
    framing:
      method: "newline_delimited"
    batch:
      timeout_secs: {{60 * 60}}
      max_bytes: {{1024 * 1024 * 1024 * 2}}
    healthcheck: false
  ship_malformed_edx_tracking_logs_to_s3:
    inputs:
    - 'filter_out_well_formed_message_edx_tracking_logs'
    type: aws_s3
    bucket: ${ENVIRONMENT}-edxapp-tracking
    region: us-east-1
    key_prefix: malformed/%F/%H_
    encoding:
      codec: json
    framing:
      method: "newline_delimited"
    batch:
      timeout_secs: {{60 * 60}}
      max_bytes: {{1024 * 1024 * 1024 * 2}}
    healthcheck: false
