---
x-superset-image: &superset-image mitodl/superset:${SUPERSET_IMAGE_SHA:-latest}
x-superset-volumes: &superset-volumes
                    # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
- ./docker:/app/docker
- superset_home:/app/superset_home

version: "3.8"
services:
  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    command:
    - "--configFile=/etc/traefik/traefik.yaml"
    env_file:
    - .env
    ports:
    - "80:80"
    - "443:443"
    volumes:
      # So that Traefik can listen to the Docker events
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - /etc/traefik/:/etc/traefik/

  superset:
    env_file: .env
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
    - 8088:8088
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    labels:
    - "traefik.http.routers.superset.tls=true"
    - "traefik.http.routers.superset.priority=1"
    - "traefik.http.routers.superset.entrypoints=https"
    - "traefik.http.routers.superset.rule=Host(`${DOMAIN:-bi-qa.ol.mit.edu}`)"
    - "traefik.http.routers.healthcheck.tls=rue"
    - "traefik.http.routers.healthcheck.priority=2"
    - "traefik.http.routers.healthcheck.entrypoints=https"
    - "traefik.http.routers.healthcheck.rule=Path(`/health`)"
    profiles:
    - web

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: .env
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    profiles:
    - web

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: .env
    restart: unless-stopped
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d\
          \ celery@$$HOSTNAME"]
    profiles:
    - worker

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: .env
    restart: unless-stopped
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    profiles:
    - worker

volumes:
  superset_home:
    external: false
