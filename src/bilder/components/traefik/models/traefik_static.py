# generated by datamodel-codegen:
#   filename:  https://json.schemastore.org/traefik-v2.json
#   timestamp: 2022-10-05T18:42:53+00:00

#   parameters: --snake-case-field --use-subclass-enum --field-include-all-keys --field-constraints --use-schema-description --target-python-version 3.9 --wrap-string-literal --use-default --class-name TraefikStaticConfig --use-standard-collections --enum-field-as-literal=one  # noqa: E501

from __future__ import annotations

from typing import Any

from pydantic import BaseModel, ConfigDict, Field


class FieldModel(BaseModel):
    model_config = ConfigDict(populate_by_name=True, extra="forbid")


class Filters(FieldModel):
    status_codes: list[str] | None = Field(None, alias="statusCodes")
    retry_attempts: bool | None = Field(None, alias="retryAttempts")
    min_duration: str | None = Field(None, alias="minDuration")


class Headers(FieldModel):
    default_mode: str | None = Field(None, alias="defaultMode")
    names: dict[str, str] | None = None


class Fields(FieldModel):
    default_mode: str | None = Field(None, alias="defaultMode")
    names: dict[str, str] | None = None
    headers: Headers | None = None


class AccessLog(FieldModel):
    file_path: str | None = Field(None, alias="filePath")
    format: str | None = None
    filters: Filters | None = None
    fields: Fields | None = Fields(
        default_mode="keep", headers=Headers(default_mode="keep")
    )
    buffering_size: int | None = Field(None, alias="bufferingSize")


class Api(FieldModel):
    insecure: bool | None = None
    dashboard: bool | None = None
    debug: bool | None = None


class Eab(FieldModel):
    kid: str | None = None
    hmac_encoded: str | None = Field(None, alias="hmacEncoded")


class DnsChallenge(FieldModel):
    provider: str | None = None
    delay_before_check: str | None = Field(None, alias="delayBeforeCheck")
    resolvers: list[str] | None = None
    disable_propagation_check: bool | None = Field(
        None, alias="disablePropagationCheck"
    )


class HttpChallenge(FieldModel):
    entry_point: str | None = Field(None, alias="entryPoint")


class Acme(FieldModel):
    email: str | None = None
    ca_server: str | None = Field(None, alias="caServer")
    certificates_duration: int | None = Field(None, alias="certificatesDuration")
    preferred_chain: str | None = Field(None, alias="preferredChain")
    storage: str | None = None
    key_type: str | None = Field(None, alias="keyType")
    eab: Eab | None = None
    dns_challenge: DnsChallenge | None = Field(None, alias="dnsChallenge")
    http_challenge: HttpChallenge | None = Field(None, alias="httpChallenge")
    tls_challenge: dict[str, Any] | None = Field(None, alias="tlsChallenge")


class CertificatesResolvers(FieldModel):
    acme: Acme | None = None


class LifeCycle(FieldModel):
    request_accept_grace_timeout: str | None = Field(
        None, alias="requestAcceptGraceTimeout"
    )
    grace_time_out: str | None = Field(None, alias="graceTimeOut")


class RespondingTimeouts(FieldModel):
    read_timeout: str | None = Field(None, alias="readTimeout")
    write_timeout: str | None = Field(None, alias="writeTimeout")
    idle_timeout: str | None = Field(None, alias="idleTimeout")


class Transport(FieldModel):
    life_cycle: LifeCycle | None = Field(None, alias="lifeCycle")
    responding_timeouts: RespondingTimeouts | None = Field(
        None, alias="respondingTimeouts"
    )


class ProxyProtocol(FieldModel):
    insecure: bool | None = None
    trusted_i_ps: list[str] | None = Field(None, alias="trustedIPs")


class ForwardedHeaders(FieldModel):
    insecure: bool | None = None
    trusted_ips: list[str] | None = Field(None, alias="trustedIPs")


class EntryPoint(FieldModel):
    to: str | None = None
    scheme: str | None = None
    permanent: bool | None = None
    priority: int | None = None


class Redirections(FieldModel):
    entry_point: EntryPoint | None = Field(None, alias="entryPoint")


class Domain(FieldModel):
    main: str | None = None
    sans: list[str] | None = None


class Tls(FieldModel):
    options: str | None = None
    cert_resolver: str | None = Field(None, alias="certResolver")
    domains: list[Domain] | None = None


class Http(FieldModel):
    redirections: Redirections | None = None
    middlewares: list[str] | None = None
    tls: Tls | None = None


class Http2(FieldModel):
    max_concurrent_streams: int | None = Field(None, alias="maxConcurrentStreams")


class Http3(FieldModel):
    advertised_port: int | None = Field(None, alias="advertisedPort")


class Udp(FieldModel):
    timeout: str | None = None


class EntryPoints(FieldModel):
    address: str | None = None
    transport: Transport | None = None
    proxy_protocol: ProxyProtocol | None = Field(None, alias="proxyProtocol")
    forwarded_headers: ForwardedHeaders | None = Field(
        ForwardedHeaders(
            trusted_ips=[
                "10.0.0.0/8",
                "172.16.0.0/12",
                "192.168.0.0/16",
            ]
        ),
        alias="forwardedHeaders",
    )
    http: Http | None = None
    http2: Http2 | None = None
    http3: Http3 | None = None
    udp: Udp | None = None


class Plugins(FieldModel):
    module_name: str | None = Field(None, alias="moduleName")
    version: str | None = None


class LocalPlugins(FieldModel):
    module_name: str | None = Field(None, alias="moduleName")


class Experimental(FieldModel):
    kubernetes_gateway: bool | None = Field(None, alias="kubernetesGateway")
    http3: bool | None = None
    hub: bool | None = None
    plugins: dict[str, Plugins] | None = None
    local_plugins: dict[str, LocalPlugins] | None = Field(None, alias="localPlugins")


class Global(FieldModel):
    check_new_version: bool | None = Field(None, alias="checkNewVersion")
    send_anonymous_usage: bool | None = Field(None, alias="sendAnonymousUsage")


class HostResolver(FieldModel):
    cname_flattening: bool | None = Field(None, alias="cnameFlattening")
    resolv_config: str | None = Field(None, alias="resolvConfig")
    resolv_depth: int | None = Field(None, alias="resolvDepth")


class Tls1(FieldModel):
    insecure: bool | None = None
    ca: str | None = None
    cert: str | None = None
    key: str | None = None


class Hub(FieldModel):
    tls: Tls1 | None = None


class Log(FieldModel):
    level: str | None = None
    file_path: str | None = Field(None, alias="filePath")
    format: str | None = None


class Prometheus(FieldModel):
    buckets: list[float] | None = None
    add_entry_points_labels: bool | None = Field(None, alias="addEntryPointsLabels")
    add_routers_labels: bool | None = Field(None, alias="addRoutersLabels")
    add_services_labels: bool | None = Field(None, alias="addServicesLabels")
    entry_point: str | None = Field(None, alias="entryPoint")
    manual_routing: bool | None = Field(None, alias="manualRouting")


class Datadog(FieldModel):
    address: str | None = None
    push_interval: str | None = Field(None, alias="pushInterval")
    add_entry_points_labels: bool | None = Field(None, alias="addEntryPointsLabels")
    add_routers_labels: bool | None = Field(None, alias="addRoutersLabels")
    add_services_labels: bool | None = Field(None, alias="addServicesLabels")
    prefix: str | None = None


class StatsD(FieldModel):
    address: str | None = None
    push_interval: str | None = Field(None, alias="pushInterval")
    add_entry_points_labels: bool | None = Field(None, alias="addEntryPointsLabels")
    add_routers_labels: bool | None = Field(None, alias="addRoutersLabels")
    add_services_labels: bool | None = Field(None, alias="addServicesLabels")
    prefix: str | None = None


class InfluxDb(FieldModel):
    address: str | None = None
    protocol: str | None = None
    push_interval: str | None = Field(None, alias="pushInterval")
    database: str | None = None
    retention_policy: str | None = Field(None, alias="retentionPolicy")
    username: str | None = None
    password: str | None = None
    add_entry_points_labels: bool | None = Field(None, alias="addEntryPointsLabels")
    add_routers_labels: bool | None = Field(None, alias="addRoutersLabels")
    add_services_labels: bool | None = Field(None, alias="addServicesLabels")
    additional_labels: dict[str, Any] | None = Field(None, alias="additionalLabels")


class InfluxDb2(FieldModel):
    address: str | None = None
    token: str | None = None
    push_interval: str | None = Field(None, alias="pushInterval")
    org: str | None = None
    bucket: str | None = None
    add_entry_points_labels: bool | None = Field(None, alias="addEntryPointsLabels")
    add_routers_labels: bool | None = Field(None, alias="addRoutersLabels")
    add_services_labels: bool | None = Field(None, alias="addServicesLabels")
    additional_labels: dict[str, Any] | None = Field(None, alias="additionalLabels")


class Metrics(FieldModel):
    prometheus: Prometheus | None = None
    datadog: Datadog | None = None
    stats_d: StatsD | None = Field(None, alias="statsD")
    influx_db: InfluxDb | None = Field(None, alias="influxDB")
    influx_db2: InfluxDb2 | None = Field(None, alias="influxDB2")


class Pilot(FieldModel):
    token: str | None = None
    dashboard: bool | None = None


class Ping(FieldModel):
    entry_point: str | None = Field(None, alias="entryPoint")
    manual_routing: bool | None = Field(None, alias="manualRouting")
    terminating_status_code: int | None = Field(None, alias="terminatingStatusCode")


class Tls2(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class Docker(FieldModel):
    allow_empty_services: bool | None = Field(None, alias="allowEmptyServices")
    constraints: str | None = None
    default_rule: str | None = Field(None, alias="defaultRule")
    endpoint: str | None = None
    exposed_by_default: bool | None = Field(None, alias="exposedByDefault")
    http_client_timeout: str | None = Field(None, alias="httpClientTimeout")
    network: str | None = None
    tls: Tls2 | None = None
    use_bind_port_ip: bool | None = Field(None, alias="useBindPortIP")
    watch: bool | None = None


class Swarm(FieldModel):
    allow_empty_services: bool | None = Field(None, alias="allowEmptyServices")
    constraints: str | None = None
    default_rule: str | None = Field(None, alias="defaultRule")
    endpoint: str | None = None
    exposed_by_default: bool | None = Field(None, alias="exposedByDefault")
    http_client_timeout: str | None = Field(None, alias="httpClientTimeout")
    network: str | None = None
    refresh_seconds: str | None = Field(None, alias="refreshSeconds")
    tls: Tls2 | None = None
    use_bind_port_ip: bool | None = Field(None, alias="useBindPortIP")
    watch: bool | None = None


class FileProvider(FieldModel):
    directory: str | None = None
    watch: bool | None = None
    filename: str | None = None
    debug_log_generated_template: bool | None = Field(
        None, alias="debugLogGeneratedTemplate"
    )


class Tls3(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class Basic(FieldModel):
    http_basic_auth_user: str | None = Field(None, alias="httpBasicAuthUser")
    http_basic_password: str | None = Field(None, alias="httpBasicPassword")


class Marathon(FieldModel):
    constraints: str | None = None
    trace: bool | None = None
    watch: bool | None = None
    endpoint: str | None = None
    default_rule: str | None = Field(None, alias="defaultRule")
    exposed_by_default: bool | None = Field(None, alias="exposedByDefault")
    dcos_token: str | None = Field(None, alias="dcosToken")
    tls: Tls3 | None = None
    dialer_timeout: str | None = Field(None, alias="dialerTimeout")
    response_header_timeout: str | None = Field(None, alias="responseHeaderTimeout")
    tls_handshake_timeout: str | None = Field(None, alias="tlsHandshakeTimeout")
    keep_alive: str | None = Field(None, alias="keepAlive")
    force_task_hostname: bool | None = Field(None, alias="forceTaskHostname")
    basic: Basic | None = None
    respect_readiness_checks: bool | None = Field(None, alias="respectReadinessChecks")


class IngressEndpoint(FieldModel):
    ip: str | None = None
    hostname: str | None = None
    published_service: str | None = Field(None, alias="publishedService")


class KubernetesIngress(FieldModel):
    endpoint: str | None = None
    token: str | None = None
    cert_auth_file_path: str | None = Field(None, alias="certAuthFilePath")
    namespaces: list[str] | None = None
    label_selector: str | None = Field(None, alias="labelSelector")
    ingress_class: str | None = Field(None, alias="ingressClass")
    throttle_duration: str | None = Field(None, alias="throttleDuration")
    allow_empty_services: bool | None = Field(None, alias="allowEmptyServices")
    allow_external_name_services: bool | None = Field(
        None, alias="allowExternalNameServices"
    )
    ingress_endpoint: IngressEndpoint | None = Field(None, alias="ingressEndpoint")


class KubernetesCrd(FieldModel):
    endpoint: str | None = None
    token: str | None = None
    cert_auth_file_path: str | None = Field(None, alias="certAuthFilePath")
    namespaces: list[str] | None = None
    allow_cross_namespace: bool | None = Field(None, alias="allowCrossNamespace")
    allow_external_name_services: bool | None = Field(
        None, alias="allowExternalNameServices"
    )
    label_selector: str | None = Field(None, alias="labelSelector")
    ingress_class: str | None = Field(None, alias="ingressClass")
    throttle_duration: str | None = Field(None, alias="throttleDuration")
    allow_empty_services: bool | None = Field(None, alias="allowEmptyServices")


class KubernetesGateway(FieldModel):
    endpoint: str | None = None
    token: str | None = None
    cert_auth_file_path: str | None = Field(None, alias="certAuthFilePath")
    namespaces: list[str] | None = None
    label_selector: str | None = Field(None, alias="labelSelector")
    throttle_duration: str | None = Field(None, alias="throttleDuration")


class Rest(FieldModel):
    insecure: bool | None = None


class Rancher(FieldModel):
    constraints: str | None = None
    watch: bool | None = None
    default_rule: str | None = Field(None, alias="defaultRule")
    exposed_by_default: bool | None = Field(None, alias="exposedByDefault")
    enable_service_health_filter: bool | None = Field(
        None, alias="enableServiceHealthFilter"
    )
    refresh_seconds: int | None = Field(None, alias="refreshSeconds")
    interval_poll: bool | None = Field(None, alias="intervalPoll")
    prefix: str | None = None


class Tls4(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class HttpAuth(FieldModel):
    username: str | None = None
    password: str | None = None


class Endpoint(FieldModel):
    address: str | None = None
    scheme: str | None = None
    datacenter: str | None = None
    token: str | None = None
    endpoint_wait_time: str | None = Field(None, alias="endpointWaitTime")
    tls: Tls4 | None = None
    http_auth: HttpAuth | None = Field(None, alias="httpAuth")


class ConsulCatalog(FieldModel):
    constraints: str | None = None
    prefix: str | None = None
    refresh_interval: str | None = Field(None, alias="refreshInterval")
    require_consistent: bool | None = Field(None, alias="requireConsistent")
    stale: bool | None = None
    cache: bool | None = None
    exposed_by_default: bool | None = Field(None, alias="exposedByDefault")
    default_rule: str | None = Field(None, alias="defaultRule")
    connect_aware: bool | None = Field(None, alias="connectAware")
    connect_by_default: bool | None = Field(None, alias="connectByDefault")
    service_name: str | None = Field(None, alias="serviceName")
    namespace: str | None = None
    namespaces: list[str] | None = None
    watch: bool | None = None
    endpoint: Endpoint | None = None


class Tls5(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class Endpoint1(FieldModel):
    address: str | None = None
    region: str | None = None
    token: str | None = None
    endpoint_wait_time: str | None = Field(None, alias="endpointWaitTime")
    tls: Tls5 | None = None


class Nomad(FieldModel):
    constraints: str | None = None
    prefix: str | None = None
    refresh_interval: str | None = Field(None, alias="refreshInterval")
    stale: bool | None = None
    exposed_by_default: bool | None = Field(None, alias="exposedByDefault")
    default_rule: str | None = Field(None, alias="defaultRule")
    namespace: str | None = None
    endpoint: Endpoint1 | None = None


class Ecs(FieldModel):
    constraints: str | None = None
    exposed_by_default: bool | None = Field(None, alias="exposedByDefault")
    ecs_anywhere: bool | None = Field(None, alias="ecsAnywhere")
    refresh_seconds: int | None = Field(None, alias="refreshSeconds")
    default_rule: str | None = Field(None, alias="defaultRule")
    clusters: list[str] | None = None
    auto_discover_clusters: bool | None = Field(None, alias="autoDiscoverClusters")
    region: str | None = None
    access_key_id: str | None = Field(None, alias="accessKeyID")
    secret_access_key: str | None = Field(None, alias="secretAccessKey")


class Tls6(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class Consul(FieldModel):
    root_key: str | None = Field(None, alias="rootKey")
    endpoints: list[str] | None = None
    token: str | None = None
    namespace: str | None = None
    namespaces: list[str] | None = None
    tls: Tls6 | None = None


class Tls7(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class Etcd(FieldModel):
    root_key: str | None = Field(None, alias="rootKey")
    endpoints: list[str] | None = None
    username: str | None = None
    password: str | None = None
    tls: Tls7 | None = None


class ZooKeeper(FieldModel):
    root_key: str | None = Field(None, alias="rootKey")
    endpoints: list[str] | None = None
    username: str | None = None
    password: str | None = None


class Tls8(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class Redis(FieldModel):
    root_key: str | None = Field(None, alias="rootKey")
    endpoints: list[str] | None = None
    username: str | None = None
    password: str | None = None
    db: int | None = None
    tls: Tls8 | None = None


class Tls9(FieldModel):
    ca: str | None = None
    ca_optional: bool | None = Field(None, alias="caOptional")
    cert: str | None = None
    key: str | None = None
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")


class Http1(FieldModel):
    endpoint: str | None = None
    poll_interval: str | None = Field(None, alias="pollInterval")
    poll_timeout: str | None = Field(None, alias="pollTimeout")
    tls: Tls9 | None = None


class Providers(FieldModel):
    providers_throttle_duration: str | None = Field(
        None, alias="providersThrottleDuration"
    )
    docker: Docker | None = None
    file: FileProvider | None = None
    marathon: Marathon | None = None
    kubernetes_ingress: KubernetesIngress | None = Field(
        None, alias="kubernetesIngress"
    )
    kubernetes_crd: KubernetesCrd | None = Field(None, alias="kubernetesCRD")
    kubernetes_gateway: KubernetesGateway | None = Field(
        None, alias="kubernetesGateway"
    )
    rest: Rest | None = None
    rancher: Rancher | None = None
    consul_catalog: ConsulCatalog | None = Field(None, alias="consulCatalog")
    nomad: Nomad | None = None
    ecs: Ecs | None = None
    consul: Consul | None = None
    etcd: Etcd | None = None
    zoo_keeper: ZooKeeper | None = Field(None, alias="zooKeeper")
    redis: Redis | None = None
    http: Http1 | None = None
    plugin: dict[str, dict[str, Any]] | None = None


class ForwardingTimeouts(FieldModel):
    dial_timeout: str | None = Field(None, alias="dialTimeout")
    response_header_timeout: str | None = Field(None, alias="responseHeaderTimeout")
    idle_conn_timeout: str | None = Field(None, alias="idleConnTimeout")


class ServersTransport(FieldModel):
    insecure_skip_verify: bool | None = Field(None, alias="insecureSkipVerify")
    root_c_as: list[str] | None = Field(None, alias="rootCAs")
    max_idle_conns_per_host: int | None = Field(None, alias="maxIdleConnsPerHost")
    forwarding_timeouts: ForwardingTimeouts | None = Field(
        None, alias="forwardingTimeouts"
    )


class Collector(FieldModel):
    endpoint: str | None = None
    user: str | None = None
    password: str | None = None


class Jaeger(FieldModel):
    sampling_server_url: str | None = Field(None, alias="samplingServerURL")
    sampling_type: str | None = Field(None, alias="samplingType")
    sampling_param: int | None = Field(None, alias="samplingParam")
    local_agent_host_port: str | None = Field(None, alias="localAgentHostPort")
    gen128_bit: bool | None = Field(None, alias="gen128Bit")
    propagation: str | None = None
    trace_context_header_name: str | None = Field(None, alias="traceContextHeaderName")
    disable_attempt_reconnecting: bool | None = Field(
        None, alias="disableAttemptReconnecting"
    )
    collector: Collector | None = None


class Zipkin(FieldModel):
    http_endpoint: str | None = Field(None, alias="httpEndpoint")
    same_span: bool | None = Field(None, alias="sameSpan")
    id128_bit: bool | None = Field(None, alias="id128Bit")
    sample_rate: int | None = Field(None, alias="sampleRate")


class Datadog1(FieldModel):
    local_agent_host_port: str | None = Field(None, alias="localAgentHostPort")
    global_tag: str | None = Field(None, alias="globalTag")
    global_tags: dict[str, str] | None = Field(
        None,
        alias="globalTags",
        description="Sets a list of key:value tags on all spans.",
    )
    debug: bool | None = None
    priority_sampling: bool | None = Field(None, alias="prioritySampling")
    trace_id_header_name: str | None = Field(None, alias="traceIDHeaderName")
    parent_id_header_name: str | None = Field(None, alias="parentIDHeaderName")
    sampling_priority_header_name: str | None = Field(
        None, alias="samplingPriorityHeaderName"
    )
    bagage_prefix_header_name: str | None = Field(None, alias="bagagePrefixHeaderName")


class Instana(FieldModel):
    local_agent_host: str | None = Field(None, alias="localAgentHost")
    local_agent_port: int | None = Field(None, alias="localAgentPort")
    log_level: str | None = Field(None, alias="logLevel")
    enable_auto_profile: bool | None = Field(None, alias="enableAutoProfile")


class Haystack(FieldModel):
    local_agent_host: str | None = Field(None, alias="localAgentHost")
    local_agent_port: int | None = Field(None, alias="localAgentPort")
    global_tag: str | None = Field(None, alias="globalTag")
    trace_id_header_name: str | None = Field(None, alias="traceIDHeaderName")
    parent_id_header_name: str | None = Field(None, alias="parentIDHeaderName")
    span_id_header_name: str | None = Field(None, alias="spanIDHeaderName")
    baggage_prefix_header_name: str | None = Field(
        None, alias="baggagePrefixHeaderName"
    )


class Elastic(FieldModel):
    server_url: str | None = Field(None, alias="serverURL")
    secret_token: str | None = Field(None, alias="secretToken")
    service_environment: str | None = Field(None, alias="serviceEnvironment")


class Tracing(FieldModel):
    service_name: str | None = Field(None, alias="serviceName")
    span_name_limit: int | None = Field(None, alias="spanNameLimit")
    jaeger: Jaeger | None = None
    zipkin: Zipkin | None = None
    datadog: Datadog1 | None = None
    instana: Instana | None = None
    haystack: Haystack | None = None
    elastic: Elastic | None = None


class TraefikStaticConfig(FieldModel):
    access_log: AccessLog | None = Field(AccessLog(), alias="accessLog")
    api: Api | None = None
    certificates_resolvers: dict[str, CertificatesResolvers] | None = Field(
        None, alias="certificatesResolvers"
    )
    entry_points: dict[str, EntryPoints] | None = Field(None, alias="entryPoints")
    experimental: Experimental | None = None
    global_: Global | None = Field(None, alias="global")
    host_resolver: HostResolver | None = Field(None, alias="hostResolver")
    hub: Hub | None = None
    log: Log | None = None
    metrics: Metrics | None = None
    pilot: Pilot | None = None
    ping: Ping | None = None
    providers: Providers | None = None
    servers_transport: ServersTransport | None = Field(None, alias="serversTransport")
    tracing: Tracing | None = None
