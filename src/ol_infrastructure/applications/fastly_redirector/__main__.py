import json
from pathlib import Path

import pulumi
import pulumi_fastly as fastly
from pulumi import Config
from pulumi_aws import route53

from bridge.lib.constants import FASTLY_A_TLS_1_3, FASTLY_CNAME_TLS_1_3
from bridge.lib.magic_numbers import FIVE_MINUTES
from ol_infrastructure.lib.aws.route53_helper import (
    fastly_certificate_validation_records,
    is_root_domain,
    lookup_zone_id_from_domain,
)
from ol_infrastructure.lib.fastly import get_fastly_provider
from ol_infrastructure.lib.pulumi_helper import parse_stack

stack_info = parse_stack()
redirect_config = Config("redirects")
fastly_provider = get_fastly_provider()
redirect_domains: list[str] = redirect_config.require_object("domains")
ol_redirect_service = fastly.ServiceVcl(
    "ol-redirect-service",
    backends=[
        {
            "address": "ol-redirect-service.s3.us-east-1.amazonaws.com",
            "name": "Empty Bucket for Fastly distribution to work",
            "override_host": "ol-redirect-service.s3.us-east-1.amazonaws.com",
            "port": 443,
            "ssl_cert_hostname": "ol-redirect-service.s3.us-east-1.amazonaws.com",
            "ssl_sni_hostname": "ol-redirect-service.s3.us-east-1.amazonaws.com",
            "use_ssl": True,
        }
    ],
    comment="Managed by Pulumi",
    dictionaries=[fastly.ServiceVclDictionaryArgs(name="redirects")],
    domains=[fastly.ServiceVclDomainArgs(name=domain) for domain in redirect_domains],
    headers=[
        {
            "action": "set",
            "destination": "http.Strict-Transport-Security",
            "name": "Generated by force TLS and enable HSTS",
            "source": '"max-age=300"',
            "type": "response",
        }
    ],
    name="ol-redirect-service",
    request_settings=[
        {
            "force_ssl": True,
            "name": "Generated by force TLS and enable HSTS",
            "xff": "",
        }
    ],
    snippets=[
        {
            "content": Path("snippets/recv_redirects.vcl").read_text(),
            "name": "recvRedirects",
            "type": "recv",
        },
        {
            "content": Path("snippets/route_redirects.vcl").read_text(),
            "name": "routeRedirects",
            "type": "error",
        },
    ],
    opts=pulumi.ResourceOptions(protect=True).merge(fastly_provider),
)

if stack_info.env_suffix == "production":
    ol_redirect_service_redirects_dictionary = fastly.ServiceDictionaryItems(
        "ol-redirect-service-redirects-dictionary",
        dictionary_id=ol_redirect_service.dictionaries.apply(
            lambda dicts: next(
                (d.dictionary_id for d in dicts if d.name == "redirects"), None
            )
        ),
        items=json.loads(Path("ovs_redirect_dict.json").read_text()),
        service_id=ol_redirect_service.id,
        opts=pulumi.ResourceOptions(protect=True).merge(fastly_provider),
    )

ol_redirect_service_tls = fastly.TlsSubscription(
    "ol-redirect-service-tls-subscription",
    # valid values are certainly, lets-encrypt, or globalsign
    certificate_authority="certainly",
    domains=[
        domain for domain in redirect_domains if lookup_zone_id_from_domain(domain)
    ],
    opts=fastly_provider,
)

ol_redirect_service_tls.managed_dns_challenges.apply(
    fastly_certificate_validation_records
)

validated_tls_subscription = fastly.TlsSubscriptionValidation(
    "ol-redirect-service-tls-subscription-validation",
    subscription_id=ol_redirect_service_tls.id,
    opts=fastly_provider,
)

for domain in redirect_domains:
    if zone_id := lookup_zone_id_from_domain(domain):
        record_type = "A" if is_root_domain(domain) else "CNAME"
        record_map = {"A": FASTLY_A_TLS_1_3, "CNAME": [FASTLY_CNAME_TLS_1_3]}
        route53.Record(
            f"fastly-target-for-domain-{domain}",
            name=domain,
            type=record_type,
            records=[str(record) for record in record_map[record_type]],
            allow_overwrite=True,
            ttl=FIVE_MINUTES,
            zone_id=zone_id,
        )
