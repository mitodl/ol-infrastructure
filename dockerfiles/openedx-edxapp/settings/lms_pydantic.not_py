"""
Settings file that uses pydantic-settings to load configuration.
This is the new production settings file for the LMS.
"""

# We intentionally define lots of variables that aren't used, and
# want to import all variables from base settings files
# pylint: disable=wildcard-import, unused-wildcard-import, useless-suppression, wrong-import-order, wrong-import-position

import codecs
import datetime
import os
import yaml
from typing import Optional, List, Dict, Any, Tuple

from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic_settings.sources import (
    YamlConfigSettingsSource,
    PydanticBaseSettingsSource,
)
from django.core.exceptions import ImproperlyConfigured
from edx_django_utils.plugins import add_plugins
from openedx_events.event_bus import merge_producer_configs
from path import Path as path

from openedx.core.djangoapps.plugins.constants import ProjectType, SettingsType
from openedx.core.lib.derived import Derived, derive_settings
from openedx.core.lib.logsettings import get_logger_config
from xmodule.modulestore.modulestore_settings import (
    convert_module_store_setting_if_needed,
)

from .common import *


class PydanticAppSettings(BaseSettings):
    """
    Define settings to be loaded from the environment here.

    These settings will be loaded from environment variables or from YAML
    configuration files. To specify YAML files, set the
    `LMS_SETTINGS_YAML_FILES` environment variable to a comma-separated
    list of file paths.
    """

    model_config = SettingsConfigDict(
        case_sensitive=False,
        extra="allow",
    )

    # Settings with complex types or special handling
    FEATURES: Dict[str, Any] = {}
    TRACKING_BACKENDS: Dict[str, Any] = {}
    EVENT_TRACKING_BACKENDS: Dict[str, Any] = {}
    JWT_AUTH: Dict[str, Any] = {}
    CELERY_QUEUES: Optional[List[str]] = None
    MKTG_URL_LINK_MAP: Dict[str, Any] = {}
    REST_FRAMEWORK: Dict[str, Any] = {}
    EVENT_BUS_PRODUCER_CONFIG: Dict[str, Any] = {}
    ADDL_INSTALLED_APPS: List[str] = []
    CELERY_BROKER_TRANSPORT_OPTIONS: Dict[str, Any] = {}
    ELASTIC_SEARCH_CONFIG_ES7: List[Dict[str, Any]] = [{}]
    THIRD_PARTY_AUTH_BACKENDS: List[str] = []
    SOCIAL_AUTH_LTI_CONSUMER_SECRETS: Dict[str, Any] = {}
    THIRD_PARTY_AUTH_OLD_CONFIG: Optional[Dict[str, Any]] = None
    THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS: Dict[str, Any] = {}
    EXTRA_MIDDLEWARE_CLASSES: List[str] = []
    CELERY_EXTRA_IMPORTS: List[str] = []

    # Settings from environment variables
    REVISION_CFG: Optional[str] = None
    DB_MIGRATION_ENGINE: Optional[str] = None
    DB_MIGRATION_USER: Optional[str] = None
    DB_MIGRATION_PASS: Optional[str] = None
    DB_MIGRATION_NAME: Optional[str] = None
    DB_MIGRATION_HOST: Optional[str] = None
    DB_MIGRATION_PORT: Optional[str] = None

    @classmethod
    def settings_customise_sources(
        cls,
        settings_cls: type[BaseSettings],
        init_settings: PydanticBaseSettingsSource,
        env_settings: PydanticBaseSettingsSource,
        dotenv_settings: PydanticBaseSettingsSource,
        file_secret_settings: PydanticBaseSettingsSource,
    ) -> tuple[PydanticBaseSettingsSource, ...]:
        """
        Customize settings sources to include YAML files.
        """
        yaml_sources = []
        yaml_files_str = os.environ.get("LMS_SETTINGS_YAML_FILES")
        if yaml_files_str:
            yaml_files = [path.strip() for path in yaml_files_str.split(",")]
            for yaml_file in yaml_files:
                if os.path.exists(yaml_file):
                    yaml_sources.append(
                        YamlConfigSettingsSource(settings_cls, yaml_file=yaml_file)
                    )

        return (
            file_secret_settings,
            *yaml_sources,
            env_settings,
            init_settings,
        )


# Load settings from environment/YAML
pydantic_settings = PydanticAppSettings()
_pydantic_settings_dict = pydantic_settings.model_dump(exclude_unset=True)


#######################################################################################################################
#### PRODUCTION DEFAULTS
####
# (Copied from lms/envs/production.py)
DEBUG = False
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SSL_AUTH_EMAIL_DOMAIN = "MIT.EDU"
SSL_AUTH_DN_FORMAT_STRING = "/C=US/ST=Massachusetts/O=Massachusetts Institute of Technology/OU=Client CA v1/CN={0}/emailAddress={1}"
DEFAULT_TEMPLATE_ENGINE["OPTIONS"]["debug"] = False
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
CELERY_RESULT_BACKEND = "django-cache"
BROKER_HEARTBEAT = 60.0
BROKER_HEARTBEAT_CHECKRATE = 2
STATIC_ROOT_BASE = None
STATIC_URL_BASE = None
EMAIL_HOST = "localhost"
EMAIL_PORT = 25
EMAIL_USE_TLS = False
SESSION_COOKIE_DOMAIN = None
SESSION_COOKIE_HTTPONLY = True
AWS_SES_REGION_NAME = "us-east-1"
AWS_SES_REGION_ENDPOINT = "email.us-east-1.amazonaws.com"
REGISTRATION_EMAIL_PATTERNS_ALLOWED = None
LMS_ROOT_URL = None
CMS_BASE = "studio.edx.org"
CELERY_EVENT_QUEUE_TTL = None
COMPREHENSIVE_THEME_LOCALE_PATHS = []
PREPEND_LOCALE_PATHS = []
COURSE_LISTINGS = {}
COMMENTS_SERVICE_URL = ""
COMMENTS_SERVICE_KEY = ""
CERT_QUEUE = "test-pull"
PYTHON_LIB_FILENAME = "python_lib.zip"
VIDEO_CDN_URL = {}
HOSTNAME_MODULESTORE_DEFAULT_MAPPINGS = {}
AWS_STORAGE_BUCKET_NAME = "edxuploads"
AWS_QUERYSTRING_AUTH = True
AWS_S3_CUSTOM_DOMAIN = "edxuploads.s3.amazonaws.com"
MONGODB_LOG = {}
ZENDESK_USER = None
ZENDESK_API_KEY = None
EDX_API_KEY = None
CELERY_BROKER_TRANSPORT = ""
CELERY_BROKER_HOSTNAME = ""
CELERY_BROKER_VHOST = ""
CELERY_BROKER_USER = ""
CELERY_BROKER_PASSWORD = ""
BROKER_USE_SSL = False
SESSION_INACTIVITY_TIMEOUT_IN_SECONDS = None
ENABLE_REQUIRE_THIRD_PARTY_AUTH = False
GOOGLE_ANALYTICS_TRACKING_ID = None
GOOGLE_ANALYTICS_LINKEDIN = None
GOOGLE_SITE_VERIFICATION_ID = None
BRANCH_IO_KEY = None
REGISTRATION_CODE_LENGTH = 8
FACEBOOK_API_VERSION = None
FACEBOOK_APP_SECRET = None
FACEBOOK_APP_ID = None
API_ACCESS_MANAGER_EMAIL = None
API_ACCESS_FROM_EMAIL = None
CHAT_COMPLETION_API = ""
CHAT_COMPLETION_API_KEY = ""
OPENAPI_CACHE_TIMEOUT = 60 * 60
MAINTENANCE_BANNER_TEXT = None
DASHBOARD_COURSE_LIMIT = None

# Derived defaults (alphabetical)
ACTIVATION_EMAIL_SUPPORT_LINK = Derived(lambda settings: settings.SUPPORT_SITE_LINK)
BULK_EMAIL_ROUTING_KEY = Derived(lambda settings: settings.HIGH_PRIORITY_QUEUE)
BULK_EMAIL_ROUTING_KEY_SMALL_JOBS = Derived(
    lambda settings: settings.DEFAULT_PRIORITY_QUEUE
)
CC_MERCHANT_NAME = Derived(lambda settings: settings.PLATFORM_NAME)
CREDENTIALS_GENERATION_ROUTING_KEY = Derived(
    lambda settings: settings.DEFAULT_PRIORITY_QUEUE
)
CSRF_TRUSTED_ORIGINS = Derived(lambda settings: settings.CSRF_TRUSTED_ORIGINS)
DEFAULT_ENTERPRISE_API_URL = Derived(
    lambda settings: (
        None
        if settings.LMS_INTERNAL_ROOT_URL is None
        else settings.LMS_INTERNAL_ROOT_URL + "/enterprise/api/v1/"
    )
)
DEFAULT_ENTERPRISE_CONSENT_API_URL = Derived(
    lambda settings: (
        None
        if settings.LMS_INTERNAL_ROOT_URL is None
        else settings.LMS_INTERNAL_ROOT_URL + "/consent/api/v1/"
    )
)
ENTERPRISE_API_URL = DEFAULT_ENTERPRISE_API_URL
ENTERPRISE_CONSENT_API_URL = DEFAULT_ENTERPRISE_CONSENT_API_URL
ENTERPRISE_ENROLLMENT_API_URL = Derived(
    lambda settings: (settings.LMS_INTERNAL_ROOT_URL or "")
    + settings.LMS_ENROLLMENT_API_PATH
)
ENTERPRISE_PUBLIC_ENROLLMENT_API_URL = Derived(
    lambda settings: (settings.LMS_ROOT_URL or "") + settings.LMS_ENROLLMENT_API_PATH
)
EMAIL_FILE_PATH = Derived(lambda settings: settings.DATA_DIR / "emails" / "lms")
ENTITLEMENTS_EXPIRATION_ROUTING_KEY = Derived(
    lambda settings: settings.DEFAULT_PRIORITY_QUEUE
)
GRADES_DOWNLOAD_ROUTING_KEY = Derived(lambda settings: settings.HIGH_MEM_QUEUE)
ID_VERIFICATION_SUPPORT_LINK = Derived(lambda settings: settings.SUPPORT_SITE_LINK)
LMS_INTERNAL_ROOT_URL = Derived(lambda settings: settings.LMS_ROOT_URL)
LOGIN_ISSUE_SUPPORT_LINK = Derived(lambda settings: settings.SUPPORT_SITE_LINK)
PASSWORD_RESET_SUPPORT_LINK = Derived(lambda settings: settings.SUPPORT_SITE_LINK)
PROGRAM_CERTIFICATES_ROUTING_KEY = Derived(
    lambda settings: settings.DEFAULT_PRIORITY_QUEUE
)
SHARED_COOKIE_DOMAIN = Derived(lambda settings: settings.SESSION_COOKIE_DOMAIN)
SOFTWARE_SECURE_VERIFICATION_ROUTING_KEY = Derived(
    lambda settings: settings.HIGH_PRIORITY_QUEUE
)


#######################################################################################################################
#### Pydantic Settings Loading
####

# Update the global namespace of this module with the key-value pairs from pydantic_settings.
special_keys_to_merge = [
    "FEATURES",
    "TRACKING_BACKENDS",
    "EVENT_TRACKING_BACKENDS",
    "JWT_AUTH",
    "CELERY_QUEUES",
    "MKTG_URL_LINK_MAP",
    "REST_FRAMEWORK",
    "EVENT_BUS_PRODUCER_CONFIG",
]

for key, value in _pydantic_settings_dict.items():
    if key.upper() not in special_keys_to_merge:
        globals()[key.upper()] = value


#######################################################################################################################
#### LOAD THE EDX-PLATFORM GIT REVISION
####

try:
    REVISION_CONFIG_FILE = pydantic_settings.REVISION_CFG
    with codecs.open(REVISION_CONFIG_FILE, encoding="utf-8") as f:
        REVISION_CONFIG = yaml.safe_load(f)
except (TypeError, FileNotFoundError, yaml.YAMLError):
    REVISION_CONFIG = {}

EDX_PLATFORM_REVISION = REVISION_CONFIG.get(
    "EDX_PLATFORM_REVISION", EDX_PLATFORM_REVISION
)


#######################################################################################################################
#### POST-PROCESSING OF SETTINGS
####

# Don't use a connection pool, since connections are dropped by ELB.
BROKER_POOL_LIMIT = 0
BROKER_CONNECTION_TIMEOUT = 1

# Each worker should only fetch one message at a time
CELERYD_PREFETCH_MULTIPLIER = 1

if STATIC_ROOT_BASE:
    STATIC_ROOT = path(STATIC_ROOT_BASE)
    WEBPACK_LOADER["DEFAULT"]["STATS_FILE"] = STATIC_ROOT / "webpack-stats.json"
    WEBPACK_LOADER["WORKERS"]["STATS_FILE"] = STATIC_ROOT / "webpack-worker-stats.json"

if STATIC_URL_BASE:
    STATIC_URL = STATIC_URL_BASE
    if not STATIC_URL.endswith("/"):
        STATIC_URL += "/"

DATA_DIR = path(DATA_DIR)

SESSION_COOKIE_SAMESITE = DCS_SESSION_COOKIE_SAMESITE

FEATURES.update(pydantic_settings.FEATURES)

ALLOWED_HOSTS = [
    "*",
    LMS_BASE,
]

if "loc_cache" not in CACHES:
    CACHES["loc_cache"] = {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "edx_location_mem_cache",
    }

if "staticfiles" in CACHES:
    CACHES["staticfiles"]["KEY_PREFIX"] = EDX_PLATFORM_REVISION

_pydantic_celery_queues = pydantic_settings.CELERY_QUEUES
if _pydantic_celery_queues:
    CELERY_QUEUES = {queue: {} for queue in _pydantic_celery_queues}

_pydantic_alternate_worker_queues = getattr(
    pydantic_settings, "ALTERNATE_WORKER_QUEUES", ""
).split()
ALTERNATE_QUEUES = [
    DEFAULT_PRIORITY_QUEUE.replace(QUEUE_VARIANT, alternate + ".")
    for alternate in _pydantic_alternate_worker_queues
]

CELERY_QUEUES.update(
    {
        alternate: {}
        for alternate in ALTERNATE_QUEUES
        if alternate not in CELERY_QUEUES.keys()
    }
)

MKTG_URL_LINK_MAP.update(pydantic_settings.MKTG_URL_LINK_MAP)

TIME_ZONE = CELERY_TIMEZONE

if hasattr(pydantic_settings, "LANGUAGE_COOKIE"):
    LANGUAGE_COOKIE_NAME = pydantic_settings.LANGUAGE_COOKIE

for app in pydantic_settings.ADDL_INSTALLED_APPS:
    INSTALLED_APPS.append(app)

LOGGING = get_logger_config(
    LOG_DIR,
    logging_env=LOGGING_ENV,
    local_loglevel=LOCAL_LOGLEVEL,
    service_variant=SERVICE_VARIANT,
)

if hasattr(pydantic_settings, "CSRF_TRUSTED_ORIGINS_WITH_SCHEME"):
    CSRF_TRUSTED_ORIGINS = pydantic_settings.CSRF_TRUSTED_ORIGINS_WITH_SCHEME

if FEATURES["ENABLE_CORS_HEADERS"] or FEATURES.get("ENABLE_CROSS_DOMAIN_CSRF_COOKIE"):
    CORS_ALLOW_CREDENTIALS = True
    if hasattr(pydantic_settings, "CORS_ORIGIN_WHITELIST"):
        CORS_ORIGIN_WHITELIST = pydantic_settings.CORS_ORIGIN_WHITELIST
    if hasattr(pydantic_settings, "CORS_ORIGIN_ALLOW_ALL"):
        CORS_ORIGIN_ALLOW_ALL = pydantic_settings.CORS_ORIGIN_ALLOW_ALL
    if hasattr(pydantic_settings, "CORS_ALLOW_INSECURE"):
        CORS_ALLOW_INSECURE = pydantic_settings.CORS_ALLOW_INSECURE
    if hasattr(pydantic_settings, "CROSS_DOMAIN_CSRF_COOKIE_DOMAIN"):
        CROSS_DOMAIN_CSRF_COOKIE_DOMAIN = (
            pydantic_settings.CROSS_DOMAIN_CSRF_COOKIE_DOMAIN
        )

if hasattr(pydantic_settings, "SEGMENT_KEY"):
    LMS_SEGMENT_KEY = pydantic_settings.SEGMENT_KEY

if hasattr(pydantic_settings, "AWS_ACCESS_KEY_ID") and AWS_ACCESS_KEY_ID == "":
    AWS_ACCESS_KEY_ID = None
if hasattr(pydantic_settings, "AWS_SECRET_ACCESS_KEY") and AWS_SECRET_ACCESS_KEY == "":
    AWS_SECRET_ACCESS_KEY = None

AWS_DEFAULT_ACL = "public-read"
AWS_BUCKET_ACL = AWS_DEFAULT_ACL

if (
    (not hasattr(pydantic_settings, "DEFAULT_FILE_STORAGE"))
    and AWS_ACCESS_KEY_ID
    and AWS_SECRET_ACCESS_KEY
):
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

for name, database in DATABASES.items():
    if name != "read_replica":
        database.update(
            {
                "ENGINE": pydantic_settings.DB_MIGRATION_ENGINE or database["ENGINE"],
                "USER": pydantic_settings.DB_MIGRATION_USER or database["USER"],
                "PASSWORD": pydantic_settings.DB_MIGRATION_PASS or database["PASSWORD"],
                "NAME": pydantic_settings.DB_MIGRATION_NAME or database["NAME"],
                "HOST": pydantic_settings.DB_MIGRATION_HOST or database["HOST"],
                "PORT": pydantic_settings.DB_MIGRATION_PORT or database["PORT"],
            }
        )

MODULESTORE = convert_module_store_setting_if_needed(MODULESTORE)

BROKER_URL = "{}://{}:{}@{}/{}".format(
    CELERY_BROKER_TRANSPORT,
    CELERY_BROKER_USER,
    CELERY_BROKER_PASSWORD,
    CELERY_BROKER_HOSTNAME,
    CELERY_BROKER_VHOST,
)
try:
    BROKER_TRANSPORT_OPTIONS = {
        "fanout_patterns": True,
        "fanout_prefix": True,
        **pydantic_settings.CELERY_BROKER_TRANSPORT_OPTIONS,
    }
except TypeError as exc:
    raise ImproperlyConfigured(
        "CELERY_BROKER_TRANSPORT_OPTIONS must be a dict"
    ) from exc

TRACKING_BACKENDS.update(pydantic_settings.TRACKING_BACKENDS)
EVENT_TRACKING_BACKENDS["tracking_logs"]["OPTIONS"]["backends"].update(
    pydantic_settings.EVENT_TRACKING_BACKENDS
)
EVENT_TRACKING_BACKENDS["segmentio"]["OPTIONS"]["processors"][0]["OPTIONS"][
    "whitelist"
].extend(EVENT_TRACKING_SEGMENTIO_EMIT_WHITELIST)

if FEATURES.get("ENABLE_THIRD_PARTY_AUTH"):
    AUTHENTICATION_BACKENDS = pydantic_settings.THIRD_PARTY_AUTH_BACKENDS + list(
        AUTHENTICATION_BACKENDS
    )
    if hasattr(pydantic_settings, "SOCIAL_AUTH_PIPELINE_TIMEOUT"):
        SOCIAL_AUTH_PIPELINE_TIMEOUT = pydantic_settings.SOCIAL_AUTH_PIPELINE_TIMEOUT
    SOCIAL_AUTH_LTI_CONSUMER_SECRETS = (
        pydantic_settings.SOCIAL_AUTH_LTI_CONSUMER_SECRETS
    )
    THIRD_PARTY_AUTH_OLD_CONFIG = pydantic_settings.THIRD_PARTY_AUTH_OLD_CONFIG
    if hours := getattr(
        pydantic_settings, "THIRD_PARTY_AUTH_SAML_FETCH_PERIOD_HOURS", 24
    ):
        CELERYBEAT_SCHEDULE["refresh-saml-metadata"] = {
            "task": "common.djangoapps.third_party_auth.fetch_saml_metadata",
            "schedule": datetime.timedelta(hours=hours),
        }
    THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS = (
        pydantic_settings.THIRD_PARTY_AUTH_CUSTOM_AUTH_FORMS
    )

if FEATURES["ENABLE_OAUTH2_PROVIDER"]:
    OAUTH_ENFORCE_SECURE = True
    OAUTH_ENFORCE_CLIENT_SECURE = True
    OAUTH_EXPIRE_DELTA = datetime.timedelta(days=OAUTH_EXPIRE_CONFIDENTIAL_CLIENT_DAYS)
    OAUTH_EXPIRE_DELTA_PUBLIC = datetime.timedelta(days=OAUTH_EXPIRE_PUBLIC_CLIENT_DAYS)

if (
    FEATURES["ENABLE_COURSEWARE_SEARCH"]
    or FEATURES["ENABLE_DASHBOARD_SEARCH"]
    or FEATURES["ENABLE_COURSE_DISCOVERY"]
    or FEATURES["ENABLE_TEAMS"]
):
    SEARCH_ENGINE = "search.elastic.ElasticSearchEngine"

ELASTIC_SEARCH_CONFIG = pydantic_settings.ELASTIC_SEARCH_CONFIG_ES7

if hasattr(pydantic_settings, "YOUTUBE_API_KEY"):
    XBLOCK_SETTINGS.setdefault("VideoBlock", {})["licensing_enabled"] = FEATURES[
        "LICENSING"
    ]
    XBLOCK_SETTINGS.setdefault("VideoBlock", {})["YOUTUBE_API_KEY"] = (
        pydantic_settings.YOUTUBE_API_KEY
    )

if FEATURES["CUSTOM_COURSES_EDX"]:
    INSTALLED_APPS += [
        "lms.djangoapps.ccx",
        "openedx.core.djangoapps.ccxcon.apps.CCXConnectorConfig",
    ]
    MODULESTORE_FIELD_OVERRIDE_PROVIDERS += (
        "lms.djangoapps.ccx.overrides.CustomCoursesForEdxOverrideProvider",
    )

FIELD_OVERRIDE_PROVIDERS = tuple(FIELD_OVERRIDE_PROVIDERS)

if FEATURES["INDIVIDUAL_DUE_DATES"]:
    FIELD_OVERRIDE_PROVIDERS += (
        "lms.djangoapps.courseware.student_field_overrides.IndividualStudentOverrideProvider",
    )

FIELD_OVERRIDE_PROVIDERS += (
    "openedx.features.personalized_learner_schedules.show_answer.show_answer_field_override.ShowAnswerFieldOverride",
)

XBLOCK_FIELD_DATA_WRAPPERS += (
    "lms.djangoapps.courseware.field_overrides:OverrideModulestoreFieldData.wrap",
)

MODULESTORE_FIELD_OVERRIDE_PROVIDERS += (
    "lms.djangoapps.courseware.self_paced_overrides.SelfPacedDateOverrideProvider",
)

PROFILE_IMAGE_DEFAULT_FILENAME = "images/profiles/default"

if FEATURES["ENABLE_LTI_PROVIDER"]:
    INSTALLED_APPS.append("lms.djangoapps.lti_provider.apps.LtiProviderConfig")
    AUTHENTICATION_BACKENDS.append("lms.djangoapps.lti_provider.users.LtiBackend")

JWT_AUTH.update(pydantic_settings.JWT_AUTH)

ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS = set(ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS)

MIDDLEWARE.extend(pydantic_settings.EXTRA_MIDDLEWARE_CLASSES)

derive_settings(__name__)

ENV_TOKENS = _pydantic_settings_dict
AUTH_TOKENS = _pydantic_settings_dict
ENV_FEATURES = pydantic_settings.FEATURES
ENV_CELERY_QUEUES = _pydantic_celery_queues
ALTERNATE_QUEUE_ENVS = _pydantic_alternate_worker_queues

add_plugins(__name__, ProjectType.LMS, SettingsType.PRODUCTION)

ALTERNATE_ENV_TASKS = {}
EXPLICIT_QUEUES = {
    "openedx.core.djangoapps.content.course_overviews.tasks.async_course_overview_update": {
        "queue": GRADES_DOWNLOAD_ROUTING_KEY
    },
    "lms.djangoapps.bulk_email.tasks.send_course_email": {
        "queue": BULK_EMAIL_ROUTING_KEY
    },
    "openedx.core.djangoapps.heartbeat.tasks.sample_task": {
        "queue": HEARTBEAT_CELERY_ROUTING_KEY
    },
    "lms.djangoapps.instructor_task.tasks.calculate_grades_csv": {
        "queue": GRADES_DOWNLOAD_ROUTING_KEY
    },
    "lms.djangoapps.instructor_task.tasks.calculate_problem_grade_report": {
        "queue": GRADES_DOWNLOAD_ROUTING_KEY
    },
    "lms.djangoapps.instructor_task.tasks.generate_certificates": {
        "queue": GRADES_DOWNLOAD_ROUTING_KEY
    },
    "lms.djangoapps.verify_student.tasks.send_verification_status_email": {
        "queue": ACE_ROUTING_KEY
    },
    "lms.djangoapps.verify_student.tasks.send_ace_message": {"queue": ACE_ROUTING_KEY},
    "lms.djangoapps.verify_student.tasks.send_request_to_ss_for_user": {
        "queue": SOFTWARE_SECURE_VERIFICATION_ROUTING_KEY
    },
    "openedx.core.djangoapps.schedules.tasks._recurring_nudge_schedule_send": {
        "queue": ACE_ROUTING_KEY
    },
    "openedx.core.djangoapps.schedules.tasks._upgrade_reminder_schedule_send": {
        "queue": ACE_ROUTING_KEY
    },
    "openedx.core.djangoapps.schedules.tasks._course_update_schedule_send": {
        "queue": ACE_ROUTING_KEY
    },
    "openedx.core.djangoapps.schedules.tasks.v1.tasks.send_grade_to_credentials": {
        "queue": CREDENTIALS_GENERATION_ROUTING_KEY
    },
    "common.djangoapps.entitlements.tasks.expire_old_entitlements": {
        "queue": ENTITLEMENTS_EXPIRATION_ROUTING_KEY
    },
    "lms.djangoapps.grades.tasks.recalculate_course_and_subsection_grades_for_user": {
        "queue": POLICY_CHANGE_GRADES_ROUTING_KEY
    },
    "lms.djangoapps.grades.tasks.recalculate_subsection_grade_v3": {
        "queue": SINGLE_LEARNER_COURSE_REGRADE_ROUTING_KEY
    },
    "openedx.core.djangoapps.programs.tasks.award_program_certificates": {
        "queue": PROGRAM_CERTIFICATES_ROUTING_KEY
    },
    "openedx.core.djangoapps.programs.tasks.revoke_program_certificates": {
        "queue": PROGRAM_CERTIFICATES_ROUTING_KEY
    },
    "openedx.core.djangoapps.programs.tasks.update_certificate_available_date_on_course_update": {
        "queue": PROGRAM_CERTIFICATES_ROUTING_KEY
    },
    "openedx.core.djangoapps.programs.tasks.award_course_certificate": {
        "queue": PROGRAM_CERTIFICATES_ROUTING_KEY
    },
    "openassessment.workflow.tasks.update_workflows_for_all_blocked_submissions_task": {
        "queue": ORA_WORKFLOW_UPDATE_ROUTING_KEY
    },
    "openassessment.workflow.tasks.update_workflows_for_course_task": {
        "queue": ORA_WORKFLOW_UPDATE_ROUTING_KEY
    },
    "openassessment.workflow.tasks.update_workflows_for_ora_block_task": {
        "queue": ORA_WORKFLOW_UPDATE_ROUTING_KEY
    },
    "openassessment.workflow.tasks.update_workflow_for_submission_task": {
        "queue": ORA_WORKFLOW_UPDATE_ROUTING_KEY
    },
}

XBLOCK_MIXINS += tuple(XBLOCK_EXTRA_MIXINS)

REST_FRAMEWORK.update(pydantic_settings.REST_FRAMEWORK)

CELERY_IMPORTS.extend(pydantic_settings.CELERY_EXTRA_IMPORTS)

COURSE_LIVE_GLOBAL_CREDENTIALS["BIG_BLUE_BUTTON"] = {
    "KEY": getattr(pydantic_settings, "BIG_BLUE_BUTTON_GLOBAL_KEY", None),
    "SECRET": getattr(pydantic_settings, "BIG_BLUE_BUTTON_GLOBAL_SECRET", None),
    "URL": getattr(pydantic_settings, "BIG_BLUE_BUTTON_GLOBAL_URL", None),
}

EVENT_BUS_PRODUCER_CONFIG = merge_producer_configs(
    EVENT_BUS_PRODUCER_CONFIG, pydantic_settings.EVENT_BUS_PRODUCER_CONFIG
)
